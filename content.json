{"meta":{"title":"1k2m5's blog","subtitle":null,"description":null,"author":"1k2m5","url":"http://yoursite.com"},"pages":[{"title":"tags","date":"2018-01-02T01:06:25.000Z","updated":"2018-01-02T01:07:27.344Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"","slug":"simple_management","date":"2018-01-04T02:24:37.440Z","updated":"2018-02-01T13:00:37.723Z","comments":true,"path":"2018/01/04/simple_management/","link":"","permalink":"http://yoursite.com/2018/01/04/simple_management/","excerpt":"","text":"title: 简单后台管理date: 2018-01-04 10:24:37 tags: Django项目人员管理1.登录注册2.班级管理、学生管理、教师管理3.增删改查 开发1.定义数据库表结构 表结构关系``` class Classes(models.Model): caption = model.CharField(max_length=32) class Student(models.Model): name = model.CharField(max_length=32) cls = models.Forignkey(&apos;Classes&apos;) username = model.CharField(max_length=32) password = model.CharField(max_length=32) class Teacher(models.Model): name = models.CharField(max_length=32) cls = models.ManytoMany(&apos;Classes&apos;) username = model.CharField(max_length=32) password = model.CharField(max_length=32) ```2.登录、注册 提交表单： - Form - Ajax - 登录 成功：保持会话 失败：错误提示","categories":[],"tags":[]},{"title":"ajax","slug":"ajax","date":"2018-01-02T15:05:00.000Z","updated":"2018-01-04T02:09:24.394Z","comments":true,"path":"2018/01/02/ajax/","link":"","permalink":"http://yoursite.com/2018/01/02/ajax/","excerpt":"","text":"一、AJAX简介AJAX(Asynchronous Javascript And XML)异步Javascript和XML 用Javascript语言与服务器进行异步交互，传送的数据为XML(现在传JSON，不用XML) 两大特点 局部刷新，交互性更强，用户体验好 异步传送，效率高，但对server端压力大 二、工作原理javascript 异步数据获取技术XmlHTTPRequest xml Dom XHTML和CSS 核心：XMLHttpRequest onreadystatechange readyState属性 5个值： 0请求未初始化 1请求已提出 2请求已发送 3服务器正在处理中，未响应完成 4服务器处理完成 responseText 获取服务器返回数据 open() 三个参数 GET/POST URL 异步处理标志 request.open(“GRT”,”test.txt”,true) send()request.send(&quot;name=cx&quot;)这里必须有等于 123456789request.onreadystatechange = function()&#123; if(request.readyState == 4)&#123; //从服务器获取数据的代码，并做响应处理 alert(request.responseText); &#125;&#125;request.send(null); 三、基于JS的ajax的实现 创建核心对象 123456var xmlhttp=new XmlHTTPRequest() #firfox,opera,safarixmlhttp = new ActiveXObject(&apos;Msxml2.XMLHTTP&apos;) #IE6+xmlhttp = new ActiveXObject(&apos;Microsoft.XMLHTTP&apos;) 使用核心对象打开服务器的连接 xmlhttp.open(&quot;&quot;)#填请求路径 发送请求 xmlhttp.send(&quot;name=a&quot;)#请求体的内容 if get请求：send(null) 注册监听，监听服务器响应 xmlhttp(if == 4:{var context = xmlhttp.responetext}) 12345678910111213141516171819202122232425262728 &lt;script&gt; function func1(self) &#123; var username = self.value;&#123;# var username = self.getAttribute(&quot;value&quot;);#&#125;&#123;# alert(username);#&#125; var xmlhttp = createXMLHttpRequest(); xmlhttp.open(&quot;POST&quot;,&quot;/ajax_register/&quot;,true); xmlhttp.setRequestHeader(&quot;Content-Type&quot;,&quot;application/x-www-form-urlencoded&quot;); xmlhttp.send(&quot;username=&quot;+username); xmlhttp.onreadystatechange=function()&#123; if(xmlhttp.readyState==4 &amp;&amp; xmlhttp.status == 200)&#123; //alert(xmlhttp.responseText) var s = xmlhttp.responseText;&#123;# alert(s);#&#125; if(s==&quot;1&quot;)&#123; alert(&quot;OK&quot;) document.getElementById(&quot;error&quot;).innerHTML=&quot;用户名已经注册了&quot;; &#125; &#125; &#125; &#125; function createXMLHttpRequest() &#123; var xmlHttp; xmlHttp = new XMLHttpRequest() return xmlHttp; &#125;&lt;/script&gt; 四、基于jquery的ajax的实现$.ajax()$.ajax() 最底层的方法1234$.ajax(url:type:&quot;POST&quot;) 1234567891.在setting.py中加STATICFILES_DIRS=( os.path.join(BASE_DIR,&quot;static&quot;))2.新建static目录，放入jQuery文件3.用JavaScript进行调用`console.log(arguments)` 快捷方式1234567891011- $.get(url,[data],[callback],[type])- $.post(url,[data],[callback],[type])- $.getJson() 与get的区别 get的type为Json- $.getScript(&quot;/static/test.js/&quot;,function)#调用的时候再加载JS- $.getJSON()- $ajax(&#123;name:&quot;a&quot;,&#125;)#url作为参数- $ajax(url,&#123;&#125;)#先写url 123456789101112131415161718192021222324$.ajax(&#123;url:&quot;&quot;,type:&quot;POST&quot;,data:&#123;a:1,b:2,&#125;,traditional:&quot;true&quot;,#data中有数组processData:&quot;false&quot; #让浏览器不要对data中的数转码contentType:text, #浏览器给服务器dataType: &quot;json&quot;, #响应数据success:function(data)&#123; console.log(data) #HttpResponse(&apos;&quot;hello&quot;&apos;)&#125;,error:function(data)&#123; console.log(arguments) alert(data)&#125;,compete:function()&#123;&#125;,#不管成功失败都打印statusCode:&#123; &apos;403&apos;:function()&#123; &#125;，&#125; #HttpResponse.status_code=&quot;&quot; 根据状态码执行&#125;) JSON1.js的原生对象，轻量级的数据交换形式JSON语法123456789json---pythonnum---int,floatstring---str,unicodearray---list,tuple&#123;&#125;---dictnull---nonetrue---truefalse---false 123456import jsonf = open(&quot;test&quot;,&quot;r&quot;)data=f.read()data=json.loads(data)print(data[&quot;name&quot;]) json.dumps() 作json转换json.parse()双引号可以，单引号不行{“”:””}符合json规范test中{&quot;name&quot;:&quot;alex&quot;} 2.JSON与XML比较 XML已经流行好多年，但在AJAX领域，JSON更受欢迎JSON本身就是JS对象，简单很多3.parse()和.stringify()parse用于从一个字符串中解析出json对象 JSON.parse(str)stringify把json对象转换成json字符串 4.beforeSend 发送前执行，如设置请求头 同源策略（浏览器）源 http://127.0.0.1:8000 协议+IP地址+端口浏览器会判断是否同源，不同源不允许数据交互跨域不能请求数据用标签 含有src属性的标签都可以跨域请求数据访问接口jsonp:json + paddingtest()在JS中已经定义好了return HttpResponse(&quot;test(&#39;var&#39;)&quot;)动态创建123456789101112131415161718192021&lt;script&gt; function addScriptTag(src)&#123; var script = document.createElement(&apos;script&apos;); script.setAttribute(&quot;type&quot;,&quot;text/javascript&quot;); script.src = src; document.body.appendChild(script); &#125; function fetch(arg)&#123; alert(&quot;hello&quot; + arg) &#125; window.onload = function()&#123; addScriptTag(&quot;http://127.0.0.1:8002/get_byjsonp?callback=fetch&quot;) &#125;&lt;/script&gt;views.py func = req.GET.get(&quot;callback&quot;,None) return HttpResponse(&quot;%s(&apos;var&apos;)&quot;%func) jQuery对JSONP的实现jQuery可以用$.getJSON(url,[data],[callbock])方法123456&lt;script&gt; $.getJSON(&quot;http://127.0.0.1:8002/get_byjsonp?callback=?&quot;,function(arg)&#123; alert(&quot;hello&quot; + arg) &#125;);&lt;/script&gt; 1234567891011121314&lt;script&gt; $.ajax(&#123; url:&quot;&quot;, dataType:&quot;jsonp&quot;, jsonp:&quot;callbacks&quot;, jsonpCallback:&quot;fetch&quot;, &#125;) function fecth(arg)&#123; alert(arg) &#125;&lt;/script&gt; 123456789101112131415161718&lt;script&gt; $.ajax(&#123; url:&quot;&quot;, dataType:&quot;jsonp&quot;, jsonp:&quot;callbacks&quot;, success:funtion(data)&#123; alert(data) &#125; &#125;);&lt;/script&gt;def get_byjsonp(req): callback = req.GET.get(&apos;callbacks&apos;) print(callback) return HttpResponse(&apos;%s(&apos;var&apos;)&apos;%callback)","categories":[],"tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"http://yoursite.com/tags/JavaScript/"}]},{"title":"Django_view&url","slug":"Django_view&url","date":"2017-12-26T00:24:52.000Z","updated":"2018-01-02T07:19:58.074Z","comments":true,"path":"2017/12/26/Django_view&url/","link":"","permalink":"http://yoursite.com/2017/12/26/Django_view&url/","excerpt":"","text":"本文中代码不可直接借鉴，由于模板语言与md存在命名规则冲突，文中代码会出现缺少{\\%的问题 一、 配置、启动1.django-admin startproject mysitesettings 配置设置urls 路由分配wsgi web服务器 manage.py —– Django项目里面的工具，通过它可以调用django shell和数据库等。settings.py —- 包含了项目的默认设置，包括数据库信息，调试标志以及其他一些工作的变量。urls.py —– 负责把URL模式映射到应用程序。views.py—– 视图函数,处理网页数据 2.在mysite 目录下创建blog应用python manage.py startapp blogblog文件中models.py ormviews.py httpresponse实例化 requesttest.py 检测用admin.py 强大之处 3.启动Django项目python manage.py runserver 8080 创建APPpython manage.py startapp app01 二、 url路由系统1.url与视图函数之间的映射表url(正则表达式，视图函数，参数，别名) 2.正则表达式以开头，以$结尾视图函数拿到的都是字符串*url(r’^articles/([0-9]{4})/([0-9]{2})/([0-9]+)/$’, views.article_detail), 代表重一到无穷次 3.有命名分组url(r’^index/(?P[0-9]{4})’,views.index,{“name”:’alex’})后面name 覆盖前面的值 4.对URL起别名action={\\% url “alex” %} 5.模板语言{\\% for i in user_list%} {\\% endfor %} 三、标签form&gt;input*3按TAB&#39;django.middleware.csrf.CsrfViewMiddleware&#39;安全验证将csrf_token加入HTML中 用于生成csrf_token的标签，用于防治跨站攻击验证。 其实，这里是会生成一个input标签，和其他表单标签一起提交给后台的。 if for with 用更简单的变量名替代复杂的变量名 url 引用路由配置 load 加载标签库 verbatim 禁止renderforloop.counter 计数器必须在INSTALLED_APPS中添加APP名称 四、Template和Context 格式化输出:&quot;%s&quot; 变量 前后端分离 模板语言：html+逻辑控制语句，作用：纽带 后端： 12`&#123;&quot;abc&quot;:times&#125;``&#123;&quot;abc&quot;:&quot;hello&quot;&#125;` 前端： render(请求文件,模板,context) return render(request,”cur_time.html”,{“abc”:times}) 命令行如何显示python manage.py shell进入项目的Django环境from django.template import Context,Templatet=Template(&quot;hello&quot;)c=Context({&quot;name&quot;:&quot;alex&quot;})t渲染c t.render(c)一个模板可以渲染多个context对象 12345678910```#lowfor name in (&apos;John&apos;,&apos;Julie&apos;,&apos;Pat&apos;): t = Tempalte(&apos;Hello,&#123;&#123;name&#125;&#125;&apos;) print t.render(Context(&#123;&apos;name&apos;:name&#125;))#Goodt = Template(&apos;Hello,&#123;&#123;name&#125;&#125;&apos;)for name in (&apos;John&apos;,&apos;Julie&apos;,&apos;Pat&apos;): print t.render(Context(&#123;&apos;name&apos;:name&#125;)) Django模板解析非常快捷，大部分的解析工作都市在后台通过对简短正则表达式一次性调用来完成。这和基于XML的模板引擎形成鲜明对比，那些引擎承担了xml解析器的开销，且往往比Django模板渲染引擎要满上几个数量级。 12345678910111213141516171819202122232425262728293031323334from django.shortcuts import render,HttpResponsefrom django.template.loader import get_template #记得导入# Create your views here.import datetimefrom django.template import Template,Context# def current_time(req): #原始的视图函数 # now=datetime.datetime.now() # html=&quot;&lt;html&gt;&lt;body&gt;现在时刻：&lt;h1&gt;%s.&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&quot; %now # return HttpResponse(html)# def current_time(req): #django模板修改的视图函数# now=datetime.datetime.now()# t=Template(&apos;&lt;html&gt;&lt;body&gt;现在时刻是:&lt;h1 style=&quot;color:red&quot;&gt;&#123;&#123;current_date&#125;&#125;&lt;/h1&gt;&lt;/body&gt;&lt;/html&gt;&apos;) #t=get_template(&apos;current_datetime.html&apos;)# c=Context(&#123;&apos;current_date&apos;:now&#125;)# html=t.render(c)# return HttpResponse(html)#另一种写法(推荐)def current_time(req): now=datetime.datetime.now() return render(req, &apos;current_datetime.html&apos;, &#123;&apos;current_date&apos;:now&#125;) 五、 过滤器filter万能的句点号sys.path 记录搜索变量的路径，项目加载的时候回添加到项目根目录位置模板语言中没有中括号，用句点号 if循环计时，从1开始计counter0从0开始计 filter,sample_tagfilter参数不能超过两个filter格式第一个参数|filter名：第二个参数sample_tag不能用于ifsample_tag格式sample_tag函数名 第一个参数 第二个参数 第三个参数 常用过滤器 add ： 给变量加上相应的值 addslashes : 给变量中的引号前加上斜线 capfirst : 首字母大写 cut ： 从字符串中移除指定的字符 date ： 格式化日期字符串 default ： 如果值是False,就替换成设置的默认值，否则就是用本来的值 default_if_none: 如果值是None，就替换成设置的默认值，否则就使用本来的值 六、模板 继承在HTML中 可替换的部分 用 block endblock包起来在填充 HTML中 extends 继承父HTML文件，而且可以邮以下形式1234block block endblockendblock 创建 123&lt;1&gt; 创建 base.html 模板，在其中定义站点的主要外观感受。 这些都是不常修改甚至从不修改的部分。&lt;2&gt; 为网站的每个区域创建 base_SECTION.html 模板(例如, base_photos.html 和 base_forum.html )。这些模板对base.html 进行拓展，并包含区域特定的风格与设计。&lt;3&gt; 为每种类型的页面创建独立的模板，例如论坛页面或者图片库。 这些模板拓展相应的区域模板。 注意1234 &lt;1&gt;如果在模板中使用 extends必须保证其为模板中的第一个模板标记。 否则，模板继承将不起作用 &lt;2&gt;一般来说，基础模板中的block标签越多越好。 &lt;3&gt;如果发觉自己在多个模板之间拷贝代码，你应该考虑将该代码段放置到父模板的某个 block中。如果要访问父模板中的块的内容，使用 &#123;&#123; block.super &#125;&#125;这个标签&lt;4&gt;不允许在同一个模板中定义多个同名的 block。存在这样的限制是因为block 标签的工作方式是双向的。block 标签不仅挖了一个要填的坑，也定义了在父模板中这个坑所填充的内容。如果模板中出现了两个相同名称的block标签，父模板将无从得知要使用哪个块的内容。 小结12345678910- render(req,template对象，context对象)- 句点号（调用列表，属性）- 两个大括号加变量- &#123;var_name|filter&#125;|管道符后面用Filter过滤器（addslashes 给变量中的引号前加深斜线）- |管道符后面加safe，变量是含HTML标签的特殊字符串让HTML渲染。- sample_tag（可以传多个参数，但不能用于if for语句）和filter（最多两个参数，第一个参数是管道符前的数）- 在settings中 `Installapps（app）`- 文件夹的名字固定：templatetags tags- .html文件最上面&#123;\\%load tags%\\&#125;- 继承 extends 为了避免重复，调用模板","categories":[],"tags":[{"name":"Django框架","slug":"Django框架","permalink":"http://yoursite.com/tags/Django框架/"}]},{"title":"Hello World","slug":"hello-world","date":"2017-12-21T13:03:18.664Z","updated":"2017-12-21T13:03:18.664Z","comments":true,"path":"2017/12/21/hello-world/","link":"","permalink":"http://yoursite.com/2017/12/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}